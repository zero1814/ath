<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-4.2.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<!-- 数据库连接池配置 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${db.driverClassName}" />
		<!-- 连接数据库的url -->
		<property name="url" value="${db.url}" />
		<!-- 连接数据库的用户名 -->
		<property name="username" value="${db.username}" />
		<!-- 连接数据库的密码 -->
		<property name="password" value="${db.password}" />
		<!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
		<property name="initialSize" value="${db.initialSize}" />
		<!-- 最大连接池数量 -->
		<property name="maxActive" value="${db.maxActive}" />
		<!-- 最小连接池数量 -->
		<property name="minIdle" value="${db.minIdle}" />
		<!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后， 缺省启用公平锁，并发效率会有所下降， 如果需要可以通过配置useUnfairLock属性为true使用非公平锁 -->
		<property name="maxWait" value="${db.maxWait}" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。 如果validationQuery为null，testOnBorrow、testOnReturn、 
			testWhileIdle都不会其作用。 -->
		<property name="validationQuery" value="${validationQuery}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效， 做了这个配置会降低性能 -->
		<property name="testOnBorrow" value="${db.testOnBorrow}" />
		<!-- 归还连接时执行validationQuery检测连接是否有效， 做了这个配置会降低性能 -->
		<property name="testOnReturn" value="${db.testOnReturn}" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。 申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis， 
			执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="${db.testWhileIdle}" />
		<!-- 有两个含义： 1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
		<property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}" />
		<!-- 对于长时间不使用的连接强制关闭 -->
		<property name="removeAbandoned" value="${db.removeAbandoned}" />
		<!-- 超过多长时间后开始关闭空闲连接 -->
		<property name="removeAbandonedTimeout" value="${db.removeAbandonedTimeout}" />
		<!-- 将当前关闭动作记录到日志 -->
		<property name="logAbandoned" value="${db.logAbandoned}" />
		<!-- 属性类型是字符串，通过别名的方式配置扩展插件， 常用的插件有： 监控统计用的filter:stat 日志用的filter:log4j 
			防御sql注入的filter:wall -->
		<property name="filters" value="${db.filters}" />
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>org.module.service.*</value>
			</list>
		</property>
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:mappers/**/*.xml" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.module.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<!-- 事务配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 定义事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 定义方法的过滤规则 -->
		<tx:attributes>
			<!-- 所有方法都使用事务 -->
			<tx:method name="*" propagation="REQUIRED" />
			<!-- 定义所有get开头的方法都是只读的 -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="find*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 定义AOP配置 -->
	<aop:config>
		<!-- 定义一个切入点 -->
		<aop:pointcut expression="execution (* org.module.service.*.*(..))"
			id="services" />
		<!-- 对切入点和事务的通知，进行适配 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="services" />
	</aop:config>
</beans>